/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WeeklyReview
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  daysAgo: 7,
  mode: "ctime" /* CTime */,
  location: "tab" /* Tab */,
  lastReview: null
};
var WeeklyReview = class extends import_obsidian.Plugin {
  async startReview(lookbackInDays, mode, location) {
    const files = this.app.vault.getMarkdownFiles();
    const start = window.moment(window.moment().startOf("day")).subtract(lookbackInDays, "days");
    const recentFiles = files.filter((f) => start.isBefore(window.moment(f.stat[mode]))).sort((a, b) => (b == null ? void 0 : b.stat[mode]) - (a == null ? void 0 : a.stat[mode]));
    const modeString = mode === "ctime" /* CTime */ ? "created" : "modified";
    new import_obsidian.Notice(`Opening ${recentFiles.length} files ${modeString} in the last ${lookbackInDays} days.`);
    let index = 0;
    let split = null;
    if (location === "split" /* Split */) {
      split = await this.app.workspace.getLeaf("split");
    }
    console.log("Opening a tab group");
    await recentFiles.forEach(async (f) => {
      await setTimeout(async () => {
        console.log(`Opening ${f.path}`, split, location);
        if (index === 0 && split) {
          await this.openFile(split, f);
        } else {
          await this.openFile(null, f);
        }
        index++;
      });
    });
    this.settings.lastReview = /* @__PURE__ */ new Date();
    await this.saveSettings();
    console.log("Weekly Review Done!");
  }
  async openFile(existingLeaf, file) {
    let leaf = existingLeaf;
    if (!leaf) {
      leaf = await this.app.workspace.getLeaf("tab");
    }
    const r = await leaf.openFile(file, { active: false });
    if (existingLeaf) {
      await this.app.workspace.setActiveLeaf(leaf);
    }
    return r;
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "Start Review",
      name: "Start Review",
      callback: () => {
        this.startReview(this.settings.daysAgo, this.settings.mode, this.settings.location);
      }
    });
    this.addSettingTab(new WeeklyReviewSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var WeeklyReviewSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for Weekly Review" });
    containerEl.createEl("h3", { text: "Last Review was on: " + window.moment(this.plugin.settings.lastReview).format("MMMM Do, YYYY h:mma") || "Never" });
    new import_obsidian.Setting(containerEl).setName("How many days to show?").setDesc("Typically this is 7").addText((text) => text.setPlaceholder("Days").setValue(this.plugin.settings.daysAgo.toString()).onChange(async (value) => {
      this.plugin.settings.daysAgo = parseInt(value);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Mode").setDesc("Would you like the plugin to return only newly created files or all files that have been recently modified?").addDropdown((dropdown) => {
      dropdown.addOption("ctime" /* CTime */, "Recently Created");
      dropdown.addOption("mtime" /* MTime */, "Recently Modified");
      dropdown.setValue(this.plugin.settings.mode);
      dropdown.onChange(async (value) => {
        this.plugin.settings.mode = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Location").setDesc("Would you like to open the review in the current tab or a new split?").addDropdown((dropdown) => {
      dropdown.addOption("tab" /* Tab */, "Current Tab");
      dropdown.addOption("split" /* Split */, "New Split");
      dropdown.setValue(this.plugin.settings.location);
      dropdown.onChange(async (value) => {
        this.plugin.settings.location = value;
        await this.plugin.saveSettings();
      });
    });
  }
};


/* nosourcemap */